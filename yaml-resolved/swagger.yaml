openapi: 3.0.0
info:
  title: WillItSync
  description: |
    Provides various methods for retrieving, parsing, and validating the 
    various portions of a web harvesting workflow.
  contact:
    email: jevans97@utk.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.1.1
servers:
  - url: 'https://localhost:8080/willitsync/1.1.1'
    description: Development server on localhost
tags:
  - name: developers
    description: Operations available to regular developers
  - name: users
    description: Operation available to all users
paths:
  /robots:
    get:
      tags:
        - developers
        - users
      summary: Retrieve sitemap references from a robots.txt file
      description: |
        Given a robots.txt file, parse, and retrieve referenced sitemap locations.
      operationId: parseRobots
      parameters:
        - name: url
          in: query
          description: URL pointing to a robots.txt file
          required: true
          example: "https://my.server.org/robots.txt"
          schema:
            type: string
            format: url
      responses:
        '200':
          description: Parsed robots.txt file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotsFile'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotsFile'
        '404':
          description: No robots.txt file found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotsFile'
  /sitemap:
    get:
      summary: Get locatiosn from a sitemap.
      tags:
        - developers
        - users
      description: |
        Parses a sitemap to retrieve location entries.
      operationId: parseSitemap
      parameters:
        - in: query
          name: url
          description: URL pointing to a sitemap xml document
          required: true
          example: "https://my.server.org/sitemap.xml"
          schema:
            type: string
            format: url
        - in: query
          name: maxlocs
          description: |
            Maximum number of sitemap locations to return
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Sitemap successfully retrieved and parsed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitemap'
        '400':
          description: Bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitemap'
        '404':
          description: No sitemap document found at url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitemap'
  /so:
    get:
      summary: Extract schema.org metadata from web page
      tags:
        - developers
        - users
      description: |
        Parses landing page to extract schema.org JSON-LD metadata
      operationId:
        parseLandingpage
      parameters:
        - in: query
          name: url
          required: true
          description: |
            URL pointing to langing page to be parsed
          example: "https://my.server.org/data/dataset_1"
          schema:
            type: string
            format: url
      responses:
        '200':
          description: Landing page successfully retrieved and parsed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
        '400':
          description: Bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
        '404':
          description: No landing page document found at URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
  /sovalid:
    get:
      summary: Retrieve and validate a schema.org JSON-LD document
      description: |
        Given a URL referencing a schema.org JSON-LD document, verify that 
        the structure matches expected model indicated in the type parameter.
      tags:
        - developers
        - users
      operationId:
        getValidateSO
      parameters:
        - in: query
          name: url
          required: true
          description: |
            URL referencing a schema.org JSON-LD document or a landing page containing schema.org JSON-LD to retrieve and validate.
          example: "https://my.server.net/data/dataset_1/jsonld.json"
          schema:
            type: string
            format: url
        - in: query
          name: sotype
          description: |
            The name of the schema.org type to test for validity.
          example: "Dataset"
          schema:
            type: string
            default: Dataset
      responses:
        '200':
          description: |
            JSON-LD successfully parsed and validated. The response body contains the retrieved schema.org JSON-LD object in the metadata element.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
        '400':
          description: Bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
        '404':
          description: No JSON-LD document found at URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
    post:
      summary: Validate provided schema.org JSON-LD document
      tags:
        - developers
        - users
      description: |
        Given a schema.org JSON-LD document, verify that the structure 
        matches expected model indicated in the type parameter.
      operationId:
        validateSO
      requestBody:
        description: |
          Schema.org JSON-LD to validate.
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: query
          name: type
          description: |
            The name of the schema.org type to test for validity.
          schema:
            type: string
            default: Dataset
      responses:
        '200':
          description: |
            JSON-LD successfully parsed and validated. The response body contains the
            retrieved schema.org JSON-LD object in the metadata element.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
        '400':
          description: Bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOMetadata'
  /scivalid:
    get:
      summary: Retrieve and validate a science metadata XML document
      description: |
        Given a URL referencing an XML metadata document, retrieve and
        validate the XML.
      tags:
        - developers
        - users
      operationId:
        getValidateMetadata
      parameters:
        - in: query
          name: url
          required: true
          description: |
            URL referencing a science metadata XML document to retrieve 
            and validate.
          example: "https://my.server/metadata/iso_metadata.xml"
          schema:
            type: string
            format: url
        - in: query
          name: formatid
          required: true
          description: |
            The DataONE formatId of the XML to test for validity.
          example: "http://www.isotc211.org/2005/gmd"
          schema:
            type: string
      responses:
        '200':
          description: |
            Metadata successfully parsed and validated. The response body 
            contains the retrieved XML metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMetadata'
        '400':
          description: Bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMetadata'
        '404':
          description: No XML document found at URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMetadata'
    post:
      summary: Validate provided science metadata XML document
      tags:
        - developers
        - users
      description: |
        Given an XML metadata document, validate the XML.
      operationId:
        validateMetadata
      requestBody:
        description: |
          Science metadata XML document to validate.
        required: true
        content:
          text/xml:
            schema:
              type: string
              format: xml
          application/xml:
            schema:
              type: string
              format: xml
      parameters:
        - in: query
          name: formatid
          required: true
          description: |
            The DataONE formatId of the XML to test for validity.
          example: "http://www.isotc211.org/2005/gmd"
          schema:
            type: string
      responses:
        '200':
          description: |
            JSON-LD successfully parsed and validated. The response body contains the
            retrieved schema.org JSON-LD object in the metadata element.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMetadata'
        '400':
          description: Bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMetadata'

components:
  schemas:
    RobotsFile:
      required:
        - evaluated_date
        - log
        - sitemaps
        - url
      type: object
      properties:
        url:
          type: string
          description: The URL for the robots.txt file
          format: url
          example: 'https://my.server.org/test'
        log:
          $ref: '#/components/schemas/Log'
        evaluated_date:
          type: string
          description: |
            The time stamp for when the evaluation of robots.txt
            was initiated.
          format: date-time
        sitemaps:
          type: array
          description: |
            A list of sitemap URLs retrieved from the robots.txt file
          items:
            type: string
            format: url
            example: 'https://my.server.com/test/sitemap.xml'
    Sitemap:
      required:
        - sitemaps
        - evaluated_date
        - log
        - urlset
      properties:
        sitemaps:
          type: array
          description: |
            List of sitemap URLs that were examined. The zeroth item
            is always the URL provided in the request.
          items:
            type: string
            format: url
            example: 'https://my.server.net/test/sitemap.xml'
            description: |
              URL for a sitemaps.xml file that was examined.
        evaluated_date:
          type: string
          format: date-time
          description: |
            The timestamp for when the evaluation of sitemaps.xml
            was initiated.
        log:
          $ref: '#/components/schemas/Log'
        urlset:
          type: array
          description: |
            A list of location entries retieved from the sitemap. Includes
            locations obtained from referenced sitemaps, if any.
          items:
            type: object
            description: |
              A list of <loc> entries found in the sitemap.
            properties:
              url:
                type: string
                format: url
                description: |
                  The value of the URL element of a loc entry in a sitemap.
              lastmod:
                type: string
                format: date-time
                description: |
                  The value of the lastmod element of the loc entry.
    SOMetadata:
      required:
        - url
        - evaluated_date
        - log
        - metadata
      properties:
        url:
          type: string
          format: url
          description: |
            URL of the content that was parsed. If a redirection
            occurs, then this is the final URL that was used to
            retrieve the content.
        evaluated_date:
          type: string
          format: date-time
          description: |
            The timestamp for when the evaluation the landing page
            was initiated.
        log:
          $ref: '#/components/schemas/Log'
        metadata:
          type: object
          description: |
            The schema.org metadata that was retrieved.
    SCIMetadata:
      required:
        - url
        - evaluated_date
        - log
        - metadata
      properties:
        url:
          type: string
          format: url
          description: |
            URL of the XML document that was retrieved and processed. If a 
            redirection occurs, then this is the final URL that was used to
            retrieve the document.
        evaluated_date:
          type: string
          format: date-time
          description: |
            The timestamp for when the evaluation the landing page
            was initiated.
        log:
          $ref: '#/components/schemas/Log'
        metadata:
          type: string
          format: xml
          description: |
            The XML metadata document that was validated.
    Log:
      type: array
      items:
        $ref: '#/components/schemas/LogEntry'
    LogEntry:
      required:
        - level
        - msg
        - timestamp
      type: object
      properties:
        level:
          type: integer
          description: |
            Logging level for entry. DEBUG=10, INFO=20, WARNING=30,
            ERROR=40, FATAL=50
          example: 10
        timestamp:
          type: string
          format: date-time
          description: Timestamp for log entry
          example: '2016-08-29T09:12:33.001Z'
        msg:
          type: string
          description: The logged message.
          example: 'A debug message'
  
